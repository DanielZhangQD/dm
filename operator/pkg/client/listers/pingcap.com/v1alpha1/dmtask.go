/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/dm/operator/pkg/apis/pingcap.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DMTaskLister helps list DMTasks.
type DMTaskLister interface {
	// List lists all DMTasks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DMTask, err error)
	// DMTasks returns an object that can list and get DMTasks.
	DMTasks(namespace string) DMTaskNamespaceLister
	DMTaskListerExpansion
}

// dMTaskLister implements the DMTaskLister interface.
type dMTaskLister struct {
	indexer cache.Indexer
}

// NewDMTaskLister returns a new DMTaskLister.
func NewDMTaskLister(indexer cache.Indexer) DMTaskLister {
	return &dMTaskLister{indexer: indexer}
}

// List lists all DMTasks in the indexer.
func (s *dMTaskLister) List(selector labels.Selector) (ret []*v1alpha1.DMTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMTask))
	})
	return ret, err
}

// DMTasks returns an object that can list and get DMTasks.
func (s *dMTaskLister) DMTasks(namespace string) DMTaskNamespaceLister {
	return dMTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DMTaskNamespaceLister helps list and get DMTasks.
type DMTaskNamespaceLister interface {
	// List lists all DMTasks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DMTask, err error)
	// Get retrieves the DMTask from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DMTask, error)
	DMTaskNamespaceListerExpansion
}

// dMTaskNamespaceLister implements the DMTaskNamespaceLister
// interface.
type dMTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DMTasks in the indexer for a given namespace.
func (s dMTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DMTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMTask))
	})
	return ret, err
}

// Get retrieves the DMTask from the indexer for a given namespace and name.
func (s dMTaskNamespaceLister) Get(name string) (*v1alpha1.DMTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dmtask"), name)
	}
	return obj.(*v1alpha1.DMTask), nil
}
