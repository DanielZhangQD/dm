/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/dm/operator/pkg/apis/pingcap.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DMMetaLister helps list DMMetas.
type DMMetaLister interface {
	// List lists all DMMetas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DMMeta, err error)
	// DMMetas returns an object that can list and get DMMetas.
	DMMetas(namespace string) DMMetaNamespaceLister
	DMMetaListerExpansion
}

// dMMetaLister implements the DMMetaLister interface.
type dMMetaLister struct {
	indexer cache.Indexer
}

// NewDMMetaLister returns a new DMMetaLister.
func NewDMMetaLister(indexer cache.Indexer) DMMetaLister {
	return &dMMetaLister{indexer: indexer}
}

// List lists all DMMetas in the indexer.
func (s *dMMetaLister) List(selector labels.Selector) (ret []*v1alpha1.DMMeta, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMMeta))
	})
	return ret, err
}

// DMMetas returns an object that can list and get DMMetas.
func (s *dMMetaLister) DMMetas(namespace string) DMMetaNamespaceLister {
	return dMMetaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DMMetaNamespaceLister helps list and get DMMetas.
type DMMetaNamespaceLister interface {
	// List lists all DMMetas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DMMeta, err error)
	// Get retrieves the DMMeta from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DMMeta, error)
	DMMetaNamespaceListerExpansion
}

// dMMetaNamespaceLister implements the DMMetaNamespaceLister
// interface.
type dMMetaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DMMetas in the indexer for a given namespace.
func (s dMMetaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DMMeta, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMMeta))
	})
	return ret, err
}

// Get retrieves the DMMeta from the indexer for a given namespace and name.
func (s dMMetaNamespaceLister) Get(name string) (*v1alpha1.DMMeta, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dmmeta"), name)
	}
	return obj.(*v1alpha1.DMMeta), nil
}
