/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/dm/operator/pkg/apis/pingcap.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DMNodeLister helps list DMNodes.
type DMNodeLister interface {
	// List lists all DMNodes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DMNode, err error)
	// DMNodes returns an object that can list and get DMNodes.
	DMNodes(namespace string) DMNodeNamespaceLister
	DMNodeListerExpansion
}

// dMNodeLister implements the DMNodeLister interface.
type dMNodeLister struct {
	indexer cache.Indexer
}

// NewDMNodeLister returns a new DMNodeLister.
func NewDMNodeLister(indexer cache.Indexer) DMNodeLister {
	return &dMNodeLister{indexer: indexer}
}

// List lists all DMNodes in the indexer.
func (s *dMNodeLister) List(selector labels.Selector) (ret []*v1alpha1.DMNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMNode))
	})
	return ret, err
}

// DMNodes returns an object that can list and get DMNodes.
func (s *dMNodeLister) DMNodes(namespace string) DMNodeNamespaceLister {
	return dMNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DMNodeNamespaceLister helps list and get DMNodes.
type DMNodeNamespaceLister interface {
	// List lists all DMNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DMNode, err error)
	// Get retrieves the DMNode from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DMNode, error)
	DMNodeNamespaceListerExpansion
}

// dMNodeNamespaceLister implements the DMNodeNamespaceLister
// interface.
type dMNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DMNodes in the indexer for a given namespace.
func (s dMNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DMNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DMNode))
	})
	return ret, err
}

// Get retrieves the DMNode from the indexer for a given namespace and name.
func (s dMNodeNamespaceLister) Get(name string) (*v1alpha1.DMNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dmnode"), name)
	}
	return obj.(*v1alpha1.DMNode), nil
}
